import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.scss";
import { useEffect, useState } from "react";
import { Maybe } from "@metamask/providers/dist/utils";
import { ethers } from "ethers";
import { ExternalProvider, Web3Provider } from "@ethersproject/providers";

import abi from "../public/WavePortal.json";

declare global {
  interface Window {
    ethereum: ExternalProvider & Web3Provider;
  }
}

const Home: NextPage = () => {
  const [currentAccount, setCurrentAccount] = useState("");
  const [totalWaves, setTotalWaves] = useState(0);
  const contractAddress = "0x0156c5f560068210862c57da081272f760e5ff4d";
  /**
   * Create a variable here that references the abi content!
   */
  const contractABI = abi.abi;

  const checkIfWalletIsConnected = async () => {
    try {
      /*
       * First make sure we have access to window.ethereum
       */
      if (typeof window === "undefined") {
        return;
      }
      const { ethereum } = window;
      if (
        ethereum == undefined ||
        ethereum == null ||
        ethereum.request == undefined
      ) {
        return null;
      }

      /*
       * Check if we're authorized to access the user's wallet
       */
      const accounts: Maybe<string[]> = await ethereum.request({
        method: "eth_accounts",
      });
      if (accounts == undefined || accounts == null) {
        return;
      }
      if (accounts.length > 0) {
        const account: string | undefined = accounts[0];
        if (account === undefined) {
          return;
        }
        console.log("Found an authorized account:", account);
        setCurrentAccount(account);
      } else {
        console.log("No authorized account found");
      }
    } catch (error) {
      console.log(error);
    }
  };
  /**
   * Implement your connectWallet method here
   */
  const connectWallet = async () => {
    try {
      const { ethereum } = window;
      if (
        ethereum == undefined ||
        ethereum == null ||
        ethereum.request == undefined
      ) {
        return;
      }

      const accounts: Maybe<string[]> = await ethereum.request({
        method: "eth_requestAccounts",
      });
      if (accounts == undefined || accounts == null) {
        return;
      }
      const account: string | undefined = accounts[0];
      if (account === undefined) {
        return;
      }
      console.log("Connected", account);
      setCurrentAccount(account);
    } catch (error) {
      console.log(error);
    }
  };

  const getContract = () => {
    const { ethereum } = window;
    if (
      ethereum == undefined ||
      ethereum == null ||
      ethereum.request == undefined
    ) {
      return null;
    }
    const provider = new ethers.providers.Web3Provider(ethereum);
    const signer = provider.getSigner();
    const wavePortalContract = new ethers.Contract(
      contractAddress,
      contractABI,
      signer
    );
    return wavePortalContract;
  };

  const fetchTotalWaves = async () => {
    const contract = getContract();
    if (contract == null) {
      return "loading";
    }
    const count = await contract.getTotalWaves();
    setTotalWaves(count.toNumber());
  };

  const wave = async () => {
    try {
      const contract = getContract();
      if (contract == null) {
        return "loading";
      }
      /*
       * Execute the actual wave from your smart contract
       */
      const waveTxn = await contract.wave();
      console.log("Mining...", waveTxn.hash);

      await waveTxn.wait();
      console.log("Mined -- ", waveTxn.hash);
      await fetchTotalWaves();
    } catch (error) {
      console.log(error);
    }
  };

  /*
   * This runs our function when the page loads.
   */
  useEffect(() => {
    checkIfWalletIsConnected();
    fetchTotalWaves();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.descriptionContainer}>
          <div className={styles.title}>ðŸ‘‹</div>

          <p>{totalWaves}</p>
          <button className={styles.waveButton} onClick={wave}>
            Wave
          </button>
        </div>

        {/*
         * If there is no currentAccount render this button
         */}
        {!currentAccount && (
          <button className="waveButton" onClick={connectWallet}>
            Connect Wallet
          </button>
        )}
      </main>
      <div className={styles.footer}>
        <a href="https://rinkeby.etherscan.io/address/0x0156c5f560068210862c57da081272f760e5ff4d">
          Rinkeby address
        </a>
      </div>
    </div>
  );
};

export default Home;
